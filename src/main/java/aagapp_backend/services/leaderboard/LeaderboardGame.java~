package aagapp_backend.services.leaderboard;

import aagapp_backend.dto.GameLeaderboardResponseDTO;
import aagapp_backend.dto.LeaderboardResponseDTO;
import aagapp_backend.entity.CustomCustomer;
import aagapp_backend.entity.ThemeEntity;
import aagapp_backend.entity.game.Game;
import aagapp_backend.entity.game.GameRoomWinner;
import aagapp_backend.entity.players.Player;
import aagapp_backend.repository.customcustomer.CustomCustomerRepository;
import aagapp_backend.repository.game.*;
import com.amazonaws.services.kms.model.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.ui.context.Theme;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


@Service
public class LeaderboardGame {



    @Autowired
    private GameRoomRepository gameRoomRepository;

    @Autowired
    private GameRoomWinnerRepository gameRoomWinnerRepository;

    @Autowired
    private PlayerRepository playerRepository;

    @Autowired
    private GameRepository gameRepository;

    @Autowired
    private ThemeRepository themeRepository;

    @Autowired
    private CustomCustomerRepository customCustomerRepository; // Assuming you have this repository


/*    public List<GameRoomWinner> getPaginatedWinners(Long gameId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<GameRoomWinner> winnerPage = gameRoomWinnerRepository.findByGame_Id(gameId, pageable);
        return winnerPage.getContent();
    }*/

    /*public List<LeaderboardResponseDTO> getLeaderboard(Long gameId) {
        // 1. Fetch the game details (gameName, gameFee, gameIcon)
        Optional<Game> gameOpt = gameRepository.findById(gameId);
        if (gameOpt.isEmpty()) {
            throw new RuntimeException("Game not found with ID: " + gameId);
        }
        Game game = gameOpt.get();

        // 2. Fetch the theme associated with the game
        Optional<ThemeEntity> themeOpt = themeRepository.findById(game.getTheme().getId()); // Assuming Game has themeId
        if (themeOpt.isEmpty()) {
            throw new RuntimeException("Theme not found for game with ID: " + gameId);
        }
        ThemeEntity theme = themeOpt.get();

        // 3. Fetch all winners (players with scores)
        List<GameRoomWinner> winners =  gameRoomWinnerRepository.findByGame_Id(gameId);

        // 4. Fetch total players in game rooms (sum of maxPlayers from GameRoom)
        long totalPlayers = gameRoomRepository.sumMaxPlayersByGameId(gameId);

        // 5. Prepare leaderboard response
        List<LeaderboardResponseDTO> leaderboard = new ArrayList<>();
        for (GameRoomWinner winner : winners) {
            Player player = winner.getPlayer();

            // Get player details from CustomCustomer
            Optional<CustomCustomer> playerDetails = customCustomerRepository.findById(winner.getId());

            if (playerDetails == null) {
                throw new RuntimeException("Player details not found for player ID: " + player.getPlayerId());
            }

            // Populate the response DTO
            LeaderboardResponseDTO response = new LeaderboardResponseDTO();
            response.setPlayerId(player.getPlayerId());
            response.setPlayerName(playerDetails.get().getName());
            response.setProfilePicture(playerDetails.get().getProfilePic());
            response.setScore(winner.getScore());
            response.setGameName(game.getName());
            response.setGameFee(game.getFee());
            response.setGameIcon(game.getImageUrl());
            response.setThemeName(theme.getName());
            response.setTotalPlayers(totalPlayers);

            leaderboard.add(response);
        }

        return leaderboard;
    }*/
    public GameLeaderboardResponseDTO getGameLeaderboard(Long gameId) {
        List<LeaderboardResponseDTO> players = leaderboardRepository.findLeaderboardPlayersByGameId(gameId); // customize this

        // Fetch game info, e.g., from Game entity
        Game game = gameRepository.findById(gameId).orElseThrow(() -> new NotFoundException("Game not found"));

        // Total max players from all rooms of this game
        Long totalPlayers = gameRoomRepository.sumMaxPlayersByGameId(gameId);

        return new GameLeaderboardResponseDTO(
                game.getName(),
                game.getFee(),
                game.getImageUrl(),
                game.getTheme().getName(),
                totalPlayers != null ? totalPlayers.intValue() : 0,
                players
        );
    }

}
